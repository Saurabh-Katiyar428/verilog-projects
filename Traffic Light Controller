`timescale 1ns / 1ps
module traffic_light_controller(
input clk,rst,
output reg[2:0]light_M1,// light for moving on main road
output reg[2:0]light_MT,// light for making a turn from main road
output reg[2:0]light_M2,// light for moving in reverse direction on main road
output reg[2:0]light_S  // light for taking a turn from side road
);

// Increased counter size for proper timing
reg [31:0] count;

//No of states 
parameter s1=0,s2=1,s3=2,s4=3,s5=4,s6=5;

reg [2:0]ps;
//TMG Time for which main road is Green
//TY  Time for which roads are yellow
//TTG Time for which turn from main road is Green
//TSG Time for which side road road is Green

// OPTIMIZED TIMING FOR SIMULATION - to see multiple transitions
parameter TMG=10, TY=5, TTG=8, TSG=6; // Very short for simulation visibility

always@(posedge clk)
 begin
 if(rst)
   begin
   ps<=s1;
   count<=0;
   end
  else
     
     case(ps)
     s1:if(count<TMG)
         begin
         ps<=s1;
         count<=count+1;
         end
        else
         begin
         ps<=s2;
         count<=0;
         end
     s2:if(count<TY)
          begin
          ps<=s2;
          count<=count+1;
          end
         else
          begin
          ps<=s3;
          count<=0;
          end 
     s3:if(count<TTG)
          begin
          ps<=s3;
          count<=count+1;
          end
        else
          begin
          ps<=s4;
          count<=0;
          end 
     s4:if(count<TY)
          begin
          ps<=s4;
          count<=count+1;
          end
        else
          begin
          ps<=s5;
          count<=0;
          end
     s5:if(count<TSG)
          begin
          ps<=s5;
          count<=count+1;
          end
        else
          begin
          ps<=s6;
          count<=0;
          end
     s6:if(count<TY)
          begin
          ps<=s6;
          count<=count+1;
          end
        else
          begin
          ps<=s1;
          count<=0;
          end  
     default:ps<=s1;
     endcase
 end
 
// Assigning values to the lights
// Red=001,Yellow=010,Green=011
always@(*)
  begin
   case(ps)
     
     s1:begin
        light_M1<=3'b011;
        light_MT<=3'b001;
        light_M2<=3'b011;
        light_S<=3'b001;
        end
      
     s2:begin
        light_M1<=3'b010;
        light_MT<=3'b001;
        light_M2<=3'b010;
        light_S<=3'b001;
        end 
     s3:begin
        light_M1<=3'b001;
        light_MT<=3'b011;
        light_M2<=3'b001;
        light_S<=3'b001;
        end 
        
     s4:begin
        light_M1<=3'b001;
        light_MT<=3'b010;
        light_M2<=3'b001;
        light_S<=3'b001;
        end 
     s5:begin
        light_M1<=3'b001;
        light_MT<=3'b001;
        light_M2<=3'b001;
        light_S<=3'b011;
        end 
        
     s6:begin
        light_M1<=3'b001;
        light_MT<=3'b001;
        light_M2<=3'b001;
        light_S<=3'b010;
        end
             
     default:begin
             light_M1<=3'b000;
             light_MT<=3'b000;
             light_M2<=3'b000;
             light_S<=3'b000;
             end
    endcase     
    
 end
endmodule
